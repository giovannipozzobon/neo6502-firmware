// ***************************************************************************************
// ***************************************************************************************
//
//      Name :      dispatch.config
//      Authors :   Paul Robson (paul@robsons.org.uk)
//      Date :      22nd November 2023
//      Reviewed :  No
//      Purpose :   Dispatched for commands
//
// ***************************************************************************************
// ***************************************************************************************

// ***************************************************************************************
//
//									Group 1 (System)
//
// ***************************************************************************************

group 1
	function 0 										// Function 0 resets the interface
		DSPReset();

	function 1 										// Function 1 copies the 32 bit system timer
		*((uint32_t *)DPARAMS) = TMRRead(); 		// (assumes littleendian)

	function 2 										// Function 2 status reads the keyboard state.
		i1 = *DPARAMS;
		*DPARAMS = (i1 < KBD_MAX_KEYCODE) ? KBDGetStateArray()[i1] : 0;
	
	function 3 										// Function 3 loads BASIC into memory
		MEMLoadBasic();

	function 4 	  									// Function 4 contributor list.
		CONWriteString((char *)whoList);

	function 5 										// Function 5 check serial port interface
		SERCheckDataAvailable();
		
	function 6  									// Function 6 set locale
		LOCSetLocale(DPARAMS[0],DPARAMS[1]);
		
// ***************************************************************************************
//
//									Group 2 (Console)
//
// ***************************************************************************************

group 2
	function 0 										// Function 0 is console out (bwd compatibility)
		CONWrite(*DPARAMS);
	function 1 										// Function 1 is console in
		*(DPARAMS) = KBDGetKey();
	function 2 										// Function 2 is key available in queue
		*(DPARAMS) = KBDIsKeyAvailable() ? 0xFF: 0;
	function 3 										// Function 3 is line input
		CONGetScreenLine(DSPGetInt16(DCOMMAND,4));
	function 4  									// Function 4 is define function key.
		*DERROR = KBDSetFunctionKey(*(DCOMMAND+4),DSPGetString(DCOMMAND,6));
	function 5  									// Function 5 is define udg
		*DERROR = CONUpdateUserFont(DPARAMS);
	function 6 										// Function 6 is console out
		CONWrite(*DPARAMS);
	function 7  									// Function 7 is set cursor position
		*DERROR = CONSetCursorPosition(DPARAMS[0],DPARAMS[1]);
	function 8  									// Function 8 lists function keys
		KBDShowFunctionKeys();
		
// ***************************************************************************************
//
//									Group 3 (File I/O)
//
// ***************************************************************************************

group 3
	function 1 										// Function 1 is directory listing
		FIODirectory();
		
	function 2 										// Function 2 is load file
		*DERROR = FIOReadFile(DSPGetString(DCOMMAND,4),DSPGetInt16(DCOMMAND,6));

	function 3 										// Function 3 is save file
		*DERROR = FIOWriteFile(DSPGetString(DCOMMAND,4),DSPGetInt16(DCOMMAND,6),DSPGetInt16(DCOMMAND,8));

	function 4										// Function 4 is open file
		*DERROR = FIOOpenFileHandle(DPARAMS[0],DSPGetString(DPARAMS,1),DPARAMS[3]);
		
	function 5										// Function 5 is close file
		*DERROR = FIOCloseFileHandle(DPARAMS[0]);

	function 6										// Function 6 is seek to position
		*DERROR = FIOSeekFileHandle(DPARAMS[0],DSPGetInt32(DPARAMS,1));

	function 7										// Function 7 is tell position
	{
		uint32_t pos;
		*DERROR = FIOTellFileHandle(DPARAMS[0],&pos);
		DSPSetInt32(DPARAMS,1,pos);
	}

	function 8                                      // Function 8 is read data
	{
		uint16_t size = DSPGetInt16(DPARAMS,3);
		*DERROR = FIOReadFileHandle(DPARAMS[0],DSPGetInt16(DPARAMS,1),&size);
		DSPSetInt16(DPARAMS,3,size);
	}

	function 9                                      // Function 9 is write data
	{
		uint16_t size = DSPGetInt16(DPARAMS,3);
		*DERROR = FIOWriteFileHandle(DPARAMS[0],DSPGetInt16(DPARAMS,1),&size);
		DSPSetInt16(DPARAMS,3,size);
	}

	function 10                                     // Function 10 is get size
	{
		uint32_t size;
		*DERROR = FIOGetSizeFileHandle(DPARAMS[0],&size);
		DSPSetInt32(DPARAMS,1,size);
	}

	function 11                                     // Function 11 is set size
	{
		*DERROR = FIOSetSizeFileHandle(DPARAMS[0],DSPGetInt32(DPARAMS,1));
	}

	function 12										// Function 12 is rename
	{
		*DERROR = FIORenameFile(DSPGetStdString(DPARAMS, 0), DSPGetStdString(DPARAMS, 1));
	}
	
// ***************************************************************************************
//
//									Group 4 (Mathematics)
//
// ***************************************************************************************

group 4
	include 	maths_binary.config
	include 	maths_unary.config
	include 	maths_other.config

// ***************************************************************************************
//
//									Group 5 (Graphics)
//
// ***************************************************************************************

group 5
	function 	1 									// Function 1, set defaults
		GFXSetDefaults(DCOMMAND);
	function 	2 									// Function 2, line draw
		GFXGraphicsCommand(2,DCOMMAND);
	function 	3 									// Function 3, rectangle draw
		GFXGraphicsCommand(3,DCOMMAND);
	function 	4 									// Function 4, ellipse draw
		GFXGraphicsCommand(4,DCOMMAND);
	function 	5 									// Function 5, pixel draw
		GFXGraphicsCommand(5,DCOMMAND);
	function 	6 									// Function 6, text draw.
		GFXGraphicsCommand(6,DCOMMAND);
	function 	7 									// Function 7, image draw.
		GFXGraphicsCommand(7,DCOMMAND);
	function  	8 									// Function 8, tilemap draw.
		*DERROR = TMPDrawTileMap(DCOMMAND);

	function 	32 									// Function 32, set palette.
		gMode.setPalette(DPARAMS[0],DPARAMS[1],DPARAMS[2],DPARAMS[3]);
	function    33 									// Function 33, read pixel
		GFXGraphicsCommand(33,DCOMMAND);
	function 	34 									// Function 34, reset palette
		GFXDefaultPalette();
	function 	35 									// Function 35, set up tilemap
		TMPSelectTileMap(cpuMemory+DSPGetInt16(DCOMMAND,4),DSPGetInt16(DCOMMAND,6),DSPGetInt16(DCOMMAND,8));
	function    36 									// Function 36, read sprite pixel
		GFXGraphicsCommand(36,DCOMMAND);
	function 	37 									// Function 37, read frame count
		*((uint32_t *)DPARAMS) = RNDGetFrameCount();

// ***************************************************************************************
//
//									Group 6 (Sprites)
//
// ***************************************************************************************		

group 6
	function 	1 									// Function 1, reset sprite system
		SPRReset();
	function 	2 									// Function 2, update sprite details
		*DERROR = SPRUpdate(DPARAMS);
	function 	3 									// Function 3, hide specific sprite
		SPRHide(DPARAMS);
	function 	4 									// Function 4, collision test
		DPARAMS[0] = SPRCollisionCheck(DERROR,DPARAMS[0],DPARAMS[1],DPARAMS[2]);
	function 	5 									// Function 5, read data
		*DERROR = SPRGetSpriteData(DPARAMS);
		
// ***************************************************************************************
//
//									Group 7 (Controller)
//
// ***************************************************************************************		

group 7
	function 	1 									// Function 1, read default.
		*DPARAMS = KBDKeyboardController(); 		// (initially always the keyboard)

// ***************************************************************************************
//
//									Group 8 (Sound)
//
// ***************************************************************************************		

group 8
	function 	1  									// Function 1, reset all
		SNDResetAll();
	function 	2 									// Function 2, reset channel
		*DERROR = SNDResetChannel(*DPARAMS);
	function 	3  									// Function 3, play the boot beep.
		SNDStartup();		
	function 	4 									// Function 4, play sound
		*DERROR = SNDPlay(DPARAMS[0],DSPGetInt16(DCOMMAND,5),DSPGetInt16(DCOMMAND,7),DSPGetInt16(DCOMMAND,9),DPARAMS[7]);
	function  	5  									// Function 5, play sound effect.
		*DERROR = SFXPlay(DPARAMS[0],DPARAMS[1]);
	function 	6 									// Function 6, notes to complete
		i1 = SNDGetNoteCount(DPARAMS[0]);
		DPARAMS[0] = i1 & 0xFF;
		*DERROR = (i1 < 0) ? 1 : 0;

// ***************************************************************************************
//
//								Group 9 (Turtle Graphics)
//
// ***************************************************************************************		

group 9		
	function 	1 									// Function 1 initialise turtle
		TTLInitialise(DPARAMS[0]);
	function 	2 									// Function 2 rotate right
		TTLRotate(DSPGetInt16(DCOMMAND,4));
	function 	3  									// Function 3 move
		TTLMove(DSPGetInt16(DCOMMAND,4),DCOMMAND[6],DCOMMAND[7]);
	function 	4 									// Function 4 hide
		TTLHide();
	function  	5 									// Function 5 home
		TTLHome();TTLUpdate();
